6
######a)Write a map-reducer program to find the total count of the players

from mrjob.job import MRJob
from mrjob.job import MRStep

class MRmyjob(MRJob):
    def mapper1(self, _, line):
        data = line.split(',')
        
        player_c = data[0].strip()
        
        #player_c = players[0:10]
        
        #if player_c == players:
        yield player_c, 1
        
    def reducer2(self, key, list_of_values):
        yield key, len(list(list_of_values))
        
        #print(list_of_values)
    def reducer1(self, key, values):
        yield "Players count", key
      #yield key[0:10], 1
     #   total = 0
      #  for i in list_of_values:
       #     total += 1 
        #return key, total 

    def steps(self):
        #return [MRStep(mapper=self.mapper1, combiner=self.reducer1, reducer=self.reducer2)]
        return [MRStep(mapper=self.mapper1, reducer=self.reducer1), MRStep(reducer=self.reducer2)]
        
if __name__ == '__main__':
    MRmyjob.run()





######b)Write a map-reducer program to find the total number of the teams.

from mrjob.job import MRJob
from mrjob.job import MRStep

class MRmyjob(MRJob):
    def mapper1(self, _, line):
        data = line.split(',')
        
        team_c = data[3].strip()
        
        
        yield team_c, 1
        
    def reducer2(self, key, list_of_values):
        yield key, len(list(list_of_values))
        
        #print(list_of_values)
    def reducer1(self, key, values):
        yield "Team count", key
       #yield key[0:10], 1
           #   total = 0
          #  for i in list_of_values:
          #     total += 1 
         #return key, total 

   def steps(self):
        #return [MRStep(mapper=self.mapper1, combiner=self.reducer1, reducer=self.reducer2)]
        return [MRStep(mapper=self.mapper1, reducer=self.reducer1), MRStep(reducer=self.reducer2)]
        
if __name__ == '__main__':
    MRmyjob.run()